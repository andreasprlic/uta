How to use the EnsemblUTA python scripts

These scripts parse alignment and fasta files provided by Ensembl (via the ftp server) and
extract the data into a dictionary. The dictionary is then used to populate data into the
necessary formats for upload into UTA.

##################
Basic instructions
##################

The data for Ensembl build comprises alignment files and fasta files and can be downloaded 
as follows:


Download data from source
#########################

Alignments (alignments directory)
ftp://ftp.ensembl.org/pub/release-<RELEASE>/gff3/homo_sapiens/Homo_sapiens.<GENOME_BUILD>.<ENSEMBL_BUILD>.chr_patch_hapl_scaff.gff3.gz
ftp://ftp.ensembl.org/pub/release-<ENSEMBL_BUILD>/gtf/homo_sapiens/Homo_sapiens.<GENOME_BUILD>.<ENSEMBL_BUILD>.chr_patch_hapl_scaff.gtf.gz

Fasta files (fasta directory)
ftp://ftp.ensembl.org/pub/release-<ENSEMBL_BUILD>/fasta/homo_sapiens/cds/Homo_sapiens.<GENOME_BUILD>.cdna.all.fa.gz
ftp://ftp.ensembl.org/pub/release-<ENSEMBL_BUILD>/fasta/homo_sapiens/pep/Homo_sapiens.<GENOME_BUILD>.pep.all.fa.gz
ftp://ftp.ensembl.org/pub/release-<ENSEMBL_BUILD>/fasta/homo_sapiens/ncrna/Homo_sapiens.<GENOME_BUILD>.ncrna.all.fa.gz

gunzip all the files

in the fasta directory, concatenate the cdna and ncrna files
e.g. $ cat Homo_sapiens.GRCh38.cdna.all.fa Homo_sapiens.GRCh38.ncrna.fa  > Homo_sapiens.GRCh38.rna.all.fa


Set filtering parameters
##########################

open the fetch_ensembl_data.py file

Ensembl consider a number of transcript bio-types to be protein coding. See the ensembl_coding_transcripts.xml file

To specify manually whether you consider the bio-type to be protein coding, set the dictionary
on line ~667 to True or False

e.g.

coding_tx = {"IG_C_gene": True, 
            "IG_D_gene": True, 
            "IG_J_gene": True, 
            "IG_V_gene": True,
            "TR_gene": True,
            "nonsense_mediated_decay": True,
            "polymorphic_pseudogene": True,
            "protein_coding": True,
            "IG_Z_gene": True,
            "IG_M_gene": True,
            "TR_V_gene": True,
            "TR_C_gene": True,
            "TR_J_gene": True,
            "TR_D_gene": True,
            "IG_LV_gene": True,
            "non_stop_decay": False,
            "nontranslating_CDS": False,
            "unknown_likely_coding": True
            }

If the bio-type is set to False, the record is kept, but the CDS data is set to 0,0 
i.e. is considered to be non-coding

Next, determine whether or not incomplete records are identified, i.e. records that are 
labelled as cds_start_NF (Ensembl have not annotated a start codon) or cds_end_nf 
(Ensembl have not annotated a valid stop codon)

e.g. filter_by_tags = True

Then decide whether the incomplete records are marked as non-coding (CDS = 0,0) or are removed

e.g. kill_by_tags = True (which will remove the record, whereas False will mark as non-coding) 


Run the Python script
#####################

$ python fetch_ensembl_data.py

Data are written to the output directory


QC the data
###########

To ensure the structure of the data are correct and consistent, QC scripts have been provided

For example, within the QC_my_scripts_GRCh38.94

Copy the data generated by the fetch_ensembl_data.py to the query_data directory

Obtain reference data from <currently, you will need to contact us for this data>

Place the reference data in the reference_data directory

Python the 4 QC scripts and a summary of the data will be written to the results directory
data that have "failed" QC are as line 1 = reference line, line 2 = query line. Discrepancies 
can then be identified.

Common discrepancies include:
Variation in the allocated Gene_Symbol column in tx_info
Variation in the allocated Gene_Symbol column in associacs

